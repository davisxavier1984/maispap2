"""
Arquivo de teste para demonstrar o sistema de relat√≥rios PDF.
"""
import streamlit as st
from datetime import datetime
from reports.pdf_generator import generate_pap_report
from reports.data_formatter import PAPDataFormatter
from reports.chart_generator import generate_chart_for_pdf

def test_report_generation():
    """Testa a gera√ß√£o de relat√≥rio com dados simulados."""
    
    # Simular dados m√≠nimos necess√°rios
    st.session_state.update({
        'municipio_selecionado': 'Belo Horizonte',
        'uf_selecionada': 'MG',
        'competencia_selecionada': '2024-05',
        'populacao': 2500000,
        'ied': 'ESTRATO 1',
        'classificacao': 'Bom',
        'vinculo': '√ìtimo',
        'calculo_realizado': True,
        'total_pap_calculado': 150000.00,
        'quantity_eSF': 5,
        'quantity_eAP 30h': 3,
        'quantity_eMULTI Ampl.': 2
    })
    
    # Testar formata√ß√£o de dados
    municipality_data = PAPDataFormatter.format_municipality_data()
    print("‚úÖ Dados do munic√≠pio formatados:")
    for key, value in municipality_data.items():
        print(f"   {key}: {value}")
    
    # Testar configura√ß√£o de servi√ßos
    services_config = PAPDataFormatter.format_services_configuration()
    print("\n‚úÖ Configura√ß√£o de servi√ßos:")
    for service in services_config:
        print(f"   {service['servico']}: {service['quantidade']} ({service['status']})")
    
    # Testar valida√ß√£o de dados
    validation = PAPDataFormatter.validate_data_completeness()
    print(f"\n‚úÖ Valida√ß√£o de dados: {'Completo' if validation['is_complete'] else 'Incompleto'}")
    print(f"   C√°lculo realizado: {'Sim' if validation['calculation_ready'] else 'N√£o'}")
    
    # Testar gera√ß√£o de gr√°fico
    scenarios_data = {'Regular': 100000, 'Suficiente': 115000, 'Bom': 135000, '√ìtimo': 160000}
    chart_base64 = generate_chart_for_pdf('scenarios_comparison', scenarios_data)
    if chart_base64:
        print("‚úÖ Gr√°fico de cen√°rios gerado com sucesso")
    else:
        print("‚ùå Erro na gera√ß√£o do gr√°fico")
    
    # Testar gera√ß√£o do PDF
    try:
        pdf_data = generate_pap_report()
        if pdf_data and len(pdf_data) > 0:
            print(f"‚úÖ PDF gerado com sucesso ({len(pdf_data)} bytes)")
            return True
        else:
            print("‚ùå PDF vazio ou erro na gera√ß√£o")
            return False
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o do PDF: {str(e)}")
        return False

def create_test_interface():
    """Cria interface de teste no Streamlit."""
    st.title("üß™ Teste do Sistema de Relat√≥rios PDF")
    
    st.info("Este √© um ambiente de teste para o sistema de relat√≥rios PDF da Calculadora PAP.")
    
    # Se√ß√£o de configura√ß√£o de teste
    st.subheader("1. Configura√ß√£o dos Dados de Teste")
    
    col1, col2 = st.columns(2)
    
    with col1:
        municipio_teste = st.text_input("Munic√≠pio", value="Belo Horizonte")
        uf_teste = st.selectbox("UF", ["MG", "SP", "RJ", "RS", "PR"], index=0)
        populacao_teste = st.number_input("Popula√ß√£o", value=2500000, min_value=1000)
    
    with col2:
        competencia_teste = st.text_input("Compet√™ncia", value="2024-05")
        classificacao_teste = st.selectbox("Classifica√ß√£o", ["Regular", "Suficiente", "Bom", "√ìtimo"], index=2)
        vinculo_teste = st.selectbox("V√≠nculo", ["Regular", "Suficiente", "Bom", "√ìtimo"], index=3)
    
    # Configurar servi√ßos de teste
    st.subheader("2. Configura√ß√£o dos Servi√ßos")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        esf_qty = st.number_input("Quantidade eSF", value=5, min_value=0)
        eap30_qty = st.number_input("Quantidade eAP 30h", value=3, min_value=0)
    
    with col2:
        eap20_qty = st.number_input("Quantidade eAP 20h", value=2, min_value=0)
        emulti_ampl_qty = st.number_input("Quantidade eMULTI Ampl.", value=2, min_value=0)
    
    with col3:
        emulti_compl_qty = st.number_input("Quantidade eMULTI Compl.", value=1, min_value=0)
        emulti_estrat_qty = st.number_input("Quantidade eMULTI Estrat.", value=1, min_value=0)
    
    # Bot√£o para aplicar configura√ß√µes
    if st.button("üîß Aplicar Configura√ß√µes de Teste", use_container_width=True):
        st.session_state.update({
            'municipio_selecionado': municipio_teste,
            'uf_selecionada': uf_teste,
            'competencia_selecionada': competencia_teste,
            'populacao': populacao_teste,
            'ied': 'ESTRATO 1',
            'classificacao': classificacao_teste,
            'vinculo': vinculo_teste,
            'calculo_realizado': True,
            'total_pap_calculado': 150000.00,
            'quantity_eSF': esf_qty,
            'quantity_eAP 30h': eap30_qty,
            'quantity_eAP 20h': eap20_qty,
            'quantity_eMULTI Ampl.': emulti_ampl_qty,
            'quantity_eMULTI Compl.': emulti_compl_qty,
            'quantity_eMULTI Estrat.': emulti_estrat_qty
        })
        st.success("‚úÖ Configura√ß√µes aplicadas com sucesso!")
    
    st.divider()
    
    # Se√ß√£o de teste dos componentes
    st.subheader("3. Teste dos Componentes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üß™ Testar Formata√ß√£o de Dados", use_container_width=True):
            with st.spinner("Testando formata√ß√£o..."):
                try:
                    municipality_data = PAPDataFormatter.format_municipality_data()
                    services_config = PAPDataFormatter.format_services_configuration()
                    validation = PAPDataFormatter.validate_data_completeness()
                    
                    st.success("‚úÖ Formata√ß√£o testada com sucesso!")
                    
                    with st.expander("üìä Dados Formatados"):
                        st.json(municipality_data)
                        st.write("Servi√ßos configurados:", len(services_config))
                        st.write("Dados completos:", validation['is_complete'])
                        
                except Exception as e:
                    st.error(f"‚ùå Erro na formata√ß√£o: {str(e)}")
    
    with col2:
        if st.button("üìà Testar Gera√ß√£o de Gr√°ficos", use_container_width=True):
            with st.spinner("Gerando gr√°ficos..."):
                try:
                    scenarios_data = {'Regular': 100000, 'Suficiente': 115000, 'Bom': 135000, '√ìtimo': 160000}
                    chart = generate_chart_for_pdf('scenarios_comparison', scenarios_data)
                    
                    if chart:
                        st.success("‚úÖ Gr√°fico gerado com sucesso!")
                        st.info(f"Tamanho do gr√°fico: {len(chart)} caracteres base64")
                    else:
                        st.error("‚ùå Erro na gera√ß√£o do gr√°fico")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro na gera√ß√£o: {str(e)}")
    
    st.divider()
    
    # Se√ß√£o de teste completo
    st.subheader("4. Teste Completo do Sistema")
    
    if st.button("üìÑ Gerar Relat√≥rio PDF de Teste", use_container_width=True, type="primary"):
        with st.spinner("Gerando relat√≥rio PDF de teste..."):
            try:
                pdf_data = generate_pap_report()
                
                if pdf_data and len(pdf_data) > 0:
                    st.success(f"‚úÖ Relat√≥rio PDF gerado com sucesso! ({len(pdf_data)} bytes)")
                    
                    # Bot√£o de download
                    filename = f"teste_relatorio_pap_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Relat√≥rio de Teste",
                        data=pdf_data,
                        file_name=filename,
                        mime="application/pdf",
                        use_container_width=True
                    )
                    
                    # Estat√≠sticas do arquivo
                    st.info(f"""
                    **Estat√≠sticas do Arquivo:**
                    - Tamanho: {len(pdf_data):,} bytes ({len(pdf_data)/1024:.1f} KB)
                    - Nome: {filename}
                    - Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
                    """)
                    
                else:
                    st.error("‚ùå Erro: PDF vazio ou n√£o gerado")
                    
            except Exception as e:
                st.error(f"‚ùå Erro na gera√ß√£o do PDF: {str(e)}")
                st.exception(e)
    
    # Informa√ß√µes sobre o teste
    st.divider()
    st.subheader("‚ÑπÔ∏è Informa√ß√µes do Teste")
    
    st.info("""
    **O que este teste verifica:**
    
    1. **Formata√ß√£o de Dados**: Extra√ß√£o e formata√ß√£o dos dados do session_state
    2. **Gera√ß√£o de Gr√°ficos**: Cria√ß√£o de visualiza√ß√µes matplotlib para PDF
    3. **Gera√ß√£o de PDF**: Cria√ß√£o do documento completo com todas as se√ß√µes
    4. **Integridade**: Verifica√ß√£o se o arquivo final est√° correto
    
    **Para usar em produ√ß√£o:**
    - Execute a calculadora principal
    - Realize os c√°lculos completos
    - Use o bot√£o "üìÑ Gerar Relat√≥rio PDF Completo" na p√°gina de resultados
    """)

if __name__ == "__main__":
    # Este c√≥digo s√≥ executa se o arquivo for chamado diretamente
    create_test_interface()
